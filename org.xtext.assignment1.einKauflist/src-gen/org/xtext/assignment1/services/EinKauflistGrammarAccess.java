/*
 * generated by Xtext
 */
package org.xtext.assignment1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EinKauflistGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BuyticketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Buyticket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuyticketAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCategoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCategoryCategoryParserRuleCall_1_0 = (RuleCall)cCategoryAssignment_1.eContents().get(0);
		
		//Buyticket:
		//	{Buyticket} category+=Category*;
		@Override public ParserRule getRule() { return rule; }

		//{Buyticket} category+=Category*
		public Group getGroup() { return cGroup; }

		//{Buyticket}
		public Action getBuyticketAction_0() { return cBuyticketAction_0; }

		//category+=Category*
		public Assignment getCategoryAssignment_1() { return cCategoryAssignment_1; }

		//Category
		public RuleCall getCategoryCategoryParserRuleCall_1_0() { return cCategoryCategoryParserRuleCall_1_0; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCategoryNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCategoryNameIDTerminalRuleCall_1_0 = (RuleCall)cCategoryNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsItemParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Category:
		//	"category" categoryName=ID ("-" items+=Item)* "end";
		@Override public ParserRule getRule() { return rule; }

		//"category" categoryName=ID ("-" items+=Item)* "end"
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//categoryName=ID
		public Assignment getCategoryNameAssignment_1() { return cCategoryNameAssignment_1; }

		//ID
		public RuleCall getCategoryNameIDTerminalRuleCall_1_0() { return cCategoryNameIDTerminalRuleCall_1_0; }

		//("-" items+=Item)*
		public Group getGroup_2() { return cGroup_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }

		//items+=Item
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//Item
		public RuleCall getItemsItemParserRuleCall_2_1_0() { return cItemsItemParserRuleCall_2_1_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cItemNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cItemNameIDTerminalRuleCall_0_0 = (RuleCall)cItemNameAssignment_0.eContents().get(0);
		private final Assignment cPriceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriceINTTerminalRuleCall_1_0 = (RuleCall)cPriceAssignment_1.eContents().get(0);
		
		//Item:
		//	itemName=ID price=INT;
		@Override public ParserRule getRule() { return rule; }

		//itemName=ID price=INT
		public Group getGroup() { return cGroup; }

		//itemName=ID
		public Assignment getItemNameAssignment_0() { return cItemNameAssignment_0; }

		//ID
		public RuleCall getItemNameIDTerminalRuleCall_0_0() { return cItemNameIDTerminalRuleCall_0_0; }

		//price=INT
		public Assignment getPriceAssignment_1() { return cPriceAssignment_1; }

		//INT
		public RuleCall getPriceINTTerminalRuleCall_1_0() { return cPriceINTTerminalRuleCall_1_0; }
	}
	
	
	private final BuyticketElements pBuyticket;
	private final CategoryElements pCategory;
	private final ItemElements pItem;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EinKauflistGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBuyticket = new BuyticketElements();
		this.pCategory = new CategoryElements();
		this.pItem = new ItemElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.assignment1.EinKauflist".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Buyticket:
	//	{Buyticket} category+=Category*;
	public BuyticketElements getBuyticketAccess() {
		return pBuyticket;
	}
	
	public ParserRule getBuyticketRule() {
		return getBuyticketAccess().getRule();
	}

	//Category:
	//	"category" categoryName=ID ("-" items+=Item)* "end";
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Item:
	//	itemName=ID price=INT;
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

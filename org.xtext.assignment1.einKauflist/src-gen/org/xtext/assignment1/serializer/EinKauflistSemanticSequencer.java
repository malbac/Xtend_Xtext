/*
 * generated by Xtext
 */
package org.xtext.assignment1.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.assignment1.einKauflist.Buyticket;
import org.xtext.assignment1.einKauflist.Category;
import org.xtext.assignment1.einKauflist.EinKauflistPackage;
import org.xtext.assignment1.einKauflist.Item;
import org.xtext.assignment1.services.EinKauflistGrammarAccess;

@SuppressWarnings("all")
public class EinKauflistSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EinKauflistGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == EinKauflistPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case EinKauflistPackage.BUYTICKET:
				sequence_Buyticket(context, (Buyticket) semanticObject); 
				return; 
			case EinKauflistPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case EinKauflistPackage.ITEM:
				sequence_Item(context, (Item) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (category+=Category*)
	 */
	protected void sequence_Buyticket(EObject context, Buyticket semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (categoryName=ID items+=Item*)
	 */
	protected void sequence_Category(EObject context, Category semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (itemName=ID price=INT)
	 */
	protected void sequence_Item(EObject context, Item semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, EinKauflistPackage.Literals.ITEM__ITEM_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EinKauflistPackage.Literals.ITEM__ITEM_NAME));
			if(transientValues.isValueTransient(semanticObject, EinKauflistPackage.Literals.ITEM__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EinKauflistPackage.Literals.ITEM__PRICE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getItemAccess().getItemNameIDTerminalRuleCall_0_0(), semanticObject.getItemName());
		feeder.accept(grammarAccess.getItemAccess().getPriceINTTerminalRuleCall_1_0(), semanticObject.getPrice());
		feeder.finish();
	}
}

/*
 * generated by Xtext
 */
grammar InternalEinKauflist;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.assignment1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.assignment1.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.assignment1.services.EinKauflistGrammarAccess;

}

@parser::members {

 	private EinKauflistGrammarAccess grammarAccess;
 	
    public InternalEinKauflistParser(TokenStream input, EinKauflistGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Buyticket";	
   	}
   	
   	@Override
   	protected EinKauflistGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBuyticket
entryRuleBuyticket returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuyticketRule()); }
	 iv_ruleBuyticket=ruleBuyticket 
	 { $current=$iv_ruleBuyticket.current; } 
	 EOF 
;

// Rule Buyticket
ruleBuyticket returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBuyticketAccess().getBuyticketAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBuyticketAccess().getCategoryCategoryParserRuleCall_1_0()); 
	    }
		lv_category_1_0=ruleCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuyticketRule());
	        }
       		add(
       			$current, 
       			"category",
        		lv_category_1_0, 
        		"Category");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleCategory
entryRuleCategory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCategoryRule()); }
	 iv_ruleCategory=ruleCategory 
	 { $current=$iv_ruleCategory.current; } 
	 EOF 
;

// Rule Category
ruleCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='category' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCategoryAccess().getCategoryKeyword_0());
    }
(
(
		lv_categoryName_1_0=RULE_ID
		{
			newLeafNode(lv_categoryName_1_0, grammarAccess.getCategoryAccess().getCategoryNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCategoryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"categoryName",
        		lv_categoryName_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCategoryAccess().getHyphenMinusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCategoryAccess().getItemsItemParserRuleCall_2_1_0()); 
	    }
		lv_items_3_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCategoryRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCategoryAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_itemName_0_0=RULE_ID
		{
			newLeafNode(lv_itemName_0_0, grammarAccess.getItemAccess().getItemNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"itemName",
        		lv_itemName_0_0, 
        		"ID");
	    }

)
)(
(
		lv_price_1_0=RULE_INT
		{
			newLeafNode(lv_price_1_0, grammarAccess.getItemAccess().getPriceINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"price",
        		lv_price_1_0, 
        		"INT");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


